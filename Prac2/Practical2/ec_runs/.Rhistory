# Generate the Fitness as a function of time plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 70))
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Seconds, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_sec.png", sep = ''))
print(plot)
dev.off()
}
# Generate graphs for the 2nd practical on EC
# Iteratively goes through the directories in ec_runs and generates the plots
# for the final report
# Mute warnings
options(warn=-1)
if (!require(ggplot2, quietly = T)){
library(ggplot2)
}
if (!require(RColorBrewer, quietly = T)) {
library(RColorBrewer)
}
# Set the stage for the outputs
if (!dir.exists("Plots"))
dir.create("Plots")
# Define a custom color blind friendly palette
cb.palette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
names(cb.palette) = as.factor(c(14, 15, 16, 17, 18))
# Generate the Fitness as a function of time plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 70))
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Seconds, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_sec.png", sep = ''))
print(plot)
dev.off()
}
# Generate the Fitness as a function of Generations plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 80))
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Generations, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_gen.png", sep = ''))
print(plot)
dev.off()
}
# Generate graphs for the 2nd practical on EC
# Iteratively goes through the directories in ec_runs and generates the plots
# for the final report
# Mute warnings
options(warn=-1)
if (!require(ggplot2, quietly = T)){
library(ggplot2)
}
if (!require(RColorBrewer, quietly = T)) {
library(RColorBrewer)
}
# Set the stage for the outputs
if (!dir.exists("Plots"))
dir.create("Plots")
# Define a custom color blind friendly palette
cb.palette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
names(cb.palette) = as.factor(c(14, 15, 16, 17, 18))
# Generate the Fitness as a function of time plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 70)) +
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Seconds, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_sec.png", sep = ''))
print(plot)
dev.off()
}
# Generate the Fitness as a function of Generations plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 80))
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Generations, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_gen.png", sep = ''))
print(plot)
dev.off()
}
# Generate graphs for the 2nd practical on EC
# Iteratively goes through the directories in ec_runs and generates the plots
# for the final report
# Mute warnings
options(warn=-1)
if (!require(ggplot2, quietly = T)){
library(ggplot2)
}
if (!require(RColorBrewer, quietly = T)) {
library(RColorBrewer)
}
# Set the stage for the outputs
if (!dir.exists("Plots"))
dir.create("Plots")
# Define a custom color blind friendly palette
cb.palette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
names(cb.palette) = as.factor(c(14, 15, 16, 17, 18))
# Generate the Fitness as a function of time plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 70)) +
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Seconds, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_sec.png", sep = ''))
print(plot)
dev.off()
}
# Generate the Fitness as a function of Generations plot
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
scale_x_continuous(limits = c(0, 80)) +
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = Generations, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_gen.png", sep = ''))
print(plot)
dev.off()
}
setwd("/Volumes/Macintosh HD 2/working/UU/Evolutionary Computing/EvoComp/Prac2/Practical2/ec_runs/le450_15c.col2")
# Generate the Fitness as a function of VD steps
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = VertexDescentSteps, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_vd.png", sep = ''))
print(plot)
dev.off()
}
if (!require(ggplot2, quietly = T)){
library(ggplot2)
}
if (!require(RColorBrewer, quietly = T)) {
library(RColorBrewer)
}
# Generate the Fitness as a function of VD steps
for (i in 1:5){
run <- paste("run", i, sep = '')
# Initialize a ggplot object for this run
plot <- ggplot() +
ggtitle(paste("le450_15c.col", run)) +
theme(legend.title = element_text(face = "bold"), plot.title = element_text(hjust = 0.5))
for (j in 14:18){
curr.run <- paste(run,"/", "le450_15c.col_", i, "_", j, ".log", sep = '')
if (file.exists(curr.run)) {
# Read the file in a dataframe
df <- read.csv(curr.run, header = T, sep = '\t')
df$Colors <- as.factor(j)
plot <- plot +
geom_line(data = df, aes(x = VertexDescentSteps, y = BestFitness, color = Colors)) +
scale_color_manual(values = c("14" = "#999999", "15" = "#E69F00", "16" = "#56B4E9", "17" = "#009E73", "18" = "#F0E442"))
}
}
png(paste("Plots/le450_15c_", run, "_fit_vd.png", sep = ''))
print(plot)
dev.off()
}
setwd("/Volumes/Macintosh HD 2/working/UU/Evolutionary Computing/EvoComp/Prac2/Practical2/ec_runs")
df <- read.table('iterations.tsv', header = F, sep = '\t')
View(df)
df <- read.table('freq.tsv', header = F, sep = '\t')
View(df)
df$V1 <- as.factor(df$V1)
summary(df$V1) -> b
barplot(b)
barplot(b[b >= 5])
barplot(b[b > 5])
barplot(b[b > 6])
b
b > 5
df <- read.table('freq.tsv', header = F, sep = '\t')
df$V1 <- as.factor(df$V1)
summary(df$V1) -> b
barplot(b[b > 6])
barplot(prop.table(table(df$V1)))
my.table <- df$V1
my.table[my.table > 5]
my.table
df <- read.table('freq.tsv', header = F, sep = '\t')
my.table <- df$V1
my.table[my.table > 5]
my.table <- as.factor(my.table[my.table > 5])
barplot(prop.table(table(df$V1)))
barplot(prop.table(table(my.table)))
?prop.table()
barplot(my.table)
table(my.table)
t <- table(my.table)
barplot(prop.table(table(my.table)), width = c(1))
barplot(prop.table(table(my.table)), width = c(1,2))
barplot(prop.table(table(my.table)), width = c(2))
barplot(prop.table(table(my.table)), width = c(3))
barplot(prop.table(table(my.table)), width = c(4))
unique(my.table)
df <- read.table('freq.tsv', header = F, sep = '\t')
my.table <- df$V1
my.table <- my.table[my.table > 5]
unique(my.table)
barplot(prop.table(table(as.factor(my.table))), width = c(4))
df <- read.table('freq.tsv', header = F, sep = '\t')
my.table <- df$V1
my.table <- my.table[my.table >= 5]
barplot(prop.table(table(as.factor(my.table))), width = c(4))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
c(1:100)
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", breaks = seq(from = 5, to = 100, by = 5))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = seq(from = 5, to = 100, by = 5))
df <- read.table('freq.tsv', header = F, sep = '\t')
my.table <- df$V1
my.table <- my.table[my.table >= 5]
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = seq(from = 5, to = 100, by = 5))
names(my.table(seq(from = 5, to = 100, by = 5)))
names((seq(from = 5, to = 100, by = 5)))
names(my.table) <- seq(from = 5, to = 100, by = 5))
names(my.table) <- seq(from = 5, to = 100, by = 5)
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = seq(from = 5, to = 100, by = 5))
names(my.table)
my.table <- df$V1
my.table <- as.factor(my.table[my.table >= 5])
names(my.table) <- seq(from = 5, to = 100, by = 5)
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = seq(from = 5, to = 100, by = 5))
my.table <- df$V1
my.table <- as.factor(my.table[my.table >= 5])
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = seq(from = 5, to = 100, by = 5))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = names(my.table))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = names(my.table))
names(my.table) <- seq(from = 5, to = 100, by = 5)
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = names(my.table))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
ggplot(prop.table(table(as.factor(my.table))))
ggplot(as.data.frame(prop.table(table(as.factor(my.table)))))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
View(df)
png('iterations.barplot.png')
ggplot(as.data.frameprop.table(table(as.factor(my.table))))
png('iterations.barplot.png')
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
dev.off()
print (i)
for (i in 1:10) {
print (i)
}
my.table
df <- read.table('freq.tsv', header = F, sep = '\t')
my.table <- df$V1
my.table <- my.table[my.table >= 5]
my.table
my.output <- my.table[my.table <= 10]
my.output
my.output.10.15 <- my.table[my.table >= 10 && my.table <=15]
my.output.10.15
my.output.10.15 <- my.table[my.table >= 10 & my.table <=15]
my.output.5.10 <- my.table[my.table <= 10]
my.output.10.15 <- my.table[my.table >= 10 & my.table <= 15]
my.output.15.20 <- my.table[my.table >= 15 & my.table <= 20]
my.output.20.25 <- my.table[my.table >= 20 & my.table <= 25]
my.output.25.30 <- my.table[my.table >= 25 & my.table <= 30]
my.output.30.35 <- my.table[my.table >= 30 & my.table <= 35]
my.output.35.40 <- my.table[my.table >= 35 & my.table <= 40]
my.output.40.45 <- my.table[my.table >= 40 & my.table <= 45]
my.output.45.50 <- my.table[my.table >= 45 & my.table <= 50]
my.output.50.55 <- my.table[my.table >= 50 & my.table <= 55]
my.output.55.60 <- my.table[my.table >= 55 & my.table <= 60]
my.output.60.65 <- my.table[my.table >= 60 & my.table <= 65]
my.output.65.70 <- my.table[my.table >= 65 & my.table <= 70]
my.output.70.75 <- my.table[my.table >= 70 & my.table <= 75]
my.output.75.80 <- my.table[my.table >= 75 & my.table <= 80]
my.output.80.85 <- my.table[my.table >= 80 & my.table <= 85]
my.output.85.90 <- my.table[my.table >= 85 & my.table <= 90]
my.output.90.95 <- my.table[my.table >= 90 & my.table <= 95]
my.output.95.100 <- my.table[my.table >= 95]
my.output.5.10 <- sum(my.table[my.table <= 10])
my.output.5.10 <- my.table[my.table <= 10]
my.output.10.15 <- my.table[my.table >= 10 & my.table <= 15]
my.output.15.20 <- my.table[my.table >= 15 & my.table <= 20]
my.output.20.25 <- my.table[my.table >= 20 & my.table <= 25]
my.output.25.30 <- my.table[my.table >= 25 & my.table <= 30]
my.output.30.35 <- my.table[my.table >= 30 & my.table <= 35]
my.output.35.40 <- my.table[my.table >= 35 & my.table <= 40]
my.output.40.45 <- my.table[my.table >= 40 & my.table <= 45]
my.output.45.50 <- my.table[my.table >= 45 & my.table <= 50]
my.output.50.55 <- my.table[my.table >= 50 & my.table <= 55]
my.output.55.60 <- my.table[my.table >= 55 & my.table <= 60]
my.output.60.65 <- my.table[my.table >= 60 & my.table <= 65]
my.output.65.70 <- my.table[my.table >= 65 & my.table <= 70]
my.output.70.75 <- my.table[my.table >= 70 & my.table <= 75]
my.output.75.80 <- my.table[my.table >= 75 & my.table <= 80]
my.output.80.85 <- my.table[my.table >= 80 & my.table <= 85]
my.output.85.90 <- my.table[my.table >= 85 & my.table <= 90]
my.output.90.95 <- my.table[my.table >= 90 & my.table <= 95]
my.output.95.100 <- my.table[my.table >= 95]
barplot(prop.table(table(as.factor(my.output.5.10))))
my.output.5.10 <- mean(my.table[my.table <= 10])
barplot(prop.table(table(as.factor(my.output.5.10))))
my.output <- c(my.output.5.10, my.output.10.15, my.output.15.20, my.output.20.25, my.output.25.30, my.output.30.35, my.output.35.40, my.output.40.45, my.output.45.50,
my.output.50.55, my.output.55.60, my.output.60.65, my.output.65.70, my.output.70.75, my.output.75.80, my.output.80.85, my.output.85.90, my.output.95.100)
barplot(prop.table(table(as.factor(c(my.output)))))
my.output.5.10
my.output.5.10 <- my.table[my.table <= 10]
my.output.10.15 <- my.table[my.table >= 10 & my.table <= 15]
my.output.15.20 <- my.table[my.table >= 15 & my.table <= 20]
my.output.20.25 <- my.table[my.table >= 20 & my.table <= 25]
my.output.25.30 <- my.table[my.table >= 25 & my.table <= 30]
my.output.30.35 <- my.table[my.table >= 30 & my.table <= 35]
my.output.35.40 <- my.table[my.table >= 35 & my.table <= 40]
my.output.40.45 <- my.table[my.table >= 40 & my.table <= 45]
my.output.45.50 <- my.table[my.table >= 45 & my.table <= 50]
my.output.50.55 <- my.table[my.table >= 50 & my.table <= 55]
my.output.55.60 <- my.table[my.table >= 55 & my.table <= 60]
my.output.60.65 <- my.table[my.table >= 60 & my.table <= 65]
my.output.65.70 <- my.table[my.table >= 65 & my.table <= 70]
my.output.70.75 <- my.table[my.table >= 70 & my.table <= 75]
my.output.75.80 <- my.table[my.table >= 75 & my.table <= 80]
my.output.80.85 <- my.table[my.table >= 80 & my.table <= 85]
my.output.85.90 <- my.table[my.table >= 85 & my.table <= 90]
my.output.90.95 <- my.table[my.table >= 90 & my.table <= 95]
my.output.95.100 <- my.table[my.table >= 95]
my.output.5.10
my.output.5.10 <- length(my.table[my.table <= 10])
my.output.5.10
my.output.5.10 <- length(my.table[my.table <= 10])
my.output.10.15 <- length(my.table[my.table >= 10 & my.table <= 15])
my.output.15.20 <- length(my.table[my.table >= 15 & my.table <= 20])
my.output.20.25 <- length(my.table[my.table >= 20 & my.table <= 25])
my.output.25.30 <- length(my.table[my.table >= 25 & my.table <= 30])
my.output.30.35 <- length(my.table[my.table >= 30 & my.table <= 35])
my.output.35.40 <- length(my.table[my.table >= 35 & my.table <= 40])
my.output.40.45 <- length(my.table[my.table >= 40 & my.table <= 45])
my.output.45.50 <- length(my.table[my.table >= 45 & my.table <= 50])
my.output.50.55 <- length(my.table[my.table >= 50 & my.table <= 55])
my.output.55.60 <- length(my.table[my.table >= 55 & my.table <= 60])
my.output.60.65 <- length(my.table[my.table >= 60 & my.table <= 65])
my.output.65.70 <- length(my.table[my.table >= 65 & my.table <= 70])
my.output.70.75 <- length(my.table[my.table >= 70 & my.table <= 75])
my.output.75.80 <- length(my.table[my.table >= 75 & my.table <= 80])
my.output.80.85 <- length(my.table[my.table >= 80 & my.table <= 85])
my.output.85.90 <- length(my.table[my.table >= 85 & my.table <= 90])
my.output.90.95 <- length(my.table[my.table >= 90 & my.table <= 95])
my.output.95.100 <- length(my.table[my.table >= 95])
my.output <- c(my.output.5.10, my.output.10.15, my.output.15.20, my.output.20.25, my.output.25.30, my.output.30.35, my.output.35.40, my.output.40.45, my.output.45.50,
my.output.50.55, my.output.55.60, my.output.60.65, my.output.65.70, my.output.70.75, my.output.75.80, my.output.80.85, my.output.85.90, my.output.95.100)
barplot(prop.table(table(as.factor(my.output))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
barplot(table(as.factor(my.output)), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
barplot(prop.table(table(as.factor(my.output))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
barplot(table(my.output), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
c(paste(seq(from = 0, to = 95, by = 5), ":", seq(from = 5, to = 100, by = 5), sep = ''))
names(my.output) <- c(paste(seq(from = 0, to = 95, by = 5), ":", seq(from = 5, to = 100, by = 5), sep = ''))
names(my.output) <- c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = ''))
c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = ''))
length(c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = '')))
length(my.output)
my.output <- c(my.output.5.10, my.output.10.15, my.output.15.20, my.output.20.25, my.output.25.30, my.output.30.35, my.output.35.40, my.output.40.45, my.output.45.50,
my.output.50.55, my.output.55.60, my.output.60.65, my.output.65.70, my.output.70.75, my.output.75.80, my.output.80.85, my.output.85.90, my.output.90.95, my.output.95.100)
names(my.output) <- c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = ''))
barplot(table(my.output), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
barplot(prop.table(table(my.output)), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
frequency(my.table)
frequency(as.factor(my.table))
freq(as.factor(my.table))
my.output.5.10 <- length(my.table[my.table <= 10])
my.output.5.10 <- sum(my.table[my.table <= 10])
my.table[my.table <= 10]
length
my.output.5.10 <- length(my.table[my.table <= 10])
barplot(prop.table(table(my.output)), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = names(my.output))
names(my.output) <- c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = ''))
barplot(prop.table(table(my.output)), width = c(4), xlab = "Iterations", ylab = "Relative Freq", names.arg = names(my.output))
barplot(prop.table(table(my.output)), width = c(4), xlab = "Iterations", ylab = "Relative Freq", breaks = seq(from = 5, to = 100, by = 5))
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq")
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", axes = FALSE
)
barplot(prop.table(table(as.factor(my.table))), width = c(4), xlab = "Iterations", ylab = "Relative Freq", axes = FALSE)
# add x-axis with offset positions, with ticks, but without labels.
axis(side = 1, at = at_tick - 1, labels = FALSE)
at_tick <- seq_len(length(my.table) + 1)
# add x-axis with offset positions, with ticks, but without labels.
axis(side = 1, at = at_tick - 1, labels = FALSE)
# add y-axis
axis(side = 2, pos = -0.2)
# add x-axis with centered position, with labels, but without ticks.
axis(side = 1, at = seq_along(my.table) - 0.5, tick = FALSE, labels = xval)
# add x-axis with centered position, with labels, but without ticks.
axis(side = 1, at = seq_along(my.table) - 0.5, tick = FALSE, labels = c(paste(seq(from = 5, to = 95, by = 5), ":", seq(from = 10, to = 100, by = 5), sep = '')))
